// Copyright (c) 2017-2018 Xiamen Yaji Software Co., Ltd.  

CCEffect %{
  techniques:
  - passes:
    - vert: vs
      frag: fs
      blendState:
        targets:
        - blend: true
      rasterizerState:
        cullMode: none
      properties:
        texture: { value: white }
        alphaThreshold: { value: 0.5 }
        light_radius: { value: 0.2 } 
        light_center: {value: [0.5, 0.5]}
        ambient_strength: {value: 0.1}
        light_strength: {value: 1.0}
        light_color: {value: [1.0, 1.0, 1.0, 1.0]}
        wh_ratio: {value: 1.0}
}%


CCProgram vs %{
  precision highp float;

  #include <cc-global>
  #include <cc-local>

  in vec3 a_position;
  in vec4 a_color;
  out vec4 v_color;
  out vec4 fragPos;

  #if USE_TEXTURE
  in vec2 a_uv0;
  out vec2 v_uv0;
  #endif

  void main () {
    vec4 pos = vec4(a_position, 1);

    #if CC_USE_MODEL
    pos = cc_matViewProj * cc_matWorld * pos;
    #else
    pos = cc_matViewProj * pos;
    #endif

    #if USE_TEXTURE
    v_uv0 = a_uv0;
    #endif

    v_color = a_color;

    gl_Position = pos;
    fragPos = pos;
  }
}%


CCProgram fs %{
  precision highp float;
  
  #include <alpha-test>
  #include <texture>

  in vec4 v_color;
  in vec4 fragPos;

  #if USE_TEXTURE
  in vec2 v_uv0;
  uniform sampler2D texture;
  #endif

  uniform LIGHT {
    // 光照中心点
    vec2 light_center;
    // 光照半径
    float light_radius;
    // 漫反射环境光强度
    float ambient_strength;
    // 光源颜色
    vec4 light_color;
    // 光照强度
    float light_strength;
    // 界面宽高比
    float wh_ratio;
  };

  void main () {
    vec4 o = vec4(1, 1, 1, 1);

    #if USE_TEXTURE
      CCTexture(texture, v_uv0, o);
    #endif

    o *= v_color;
    ALPHA_TEST(o);

    // 计算当前点是否在光照范围内
    float dist = sqrt(pow(fragPos.x * wh_ratio - light_center.x * wh_ratio, 2.0) + pow(fragPos.y - light_center.y, 2.0));
    // 光照强度
    float result = light_strength;
    // 根据点到光源圆心的距离判断光照范围
    if (dist > light_radius) {
      // 通过插值让光照过度平滑
      float r = (1.0 - smoothstep(light_radius, light_radius + 0.1, dist)) * result;
      // 该判断用于保证漫反射的环境光有效
      if (r <= ambient_strength) {
        r = ambient_strength;
      }
      gl_FragColor = vec4(o.r * r, o.g * r, o.b * r, 1.0) * light_color;
    } else {
      gl_FragColor = vec4(o.r * result, o.g * result, o.b * result, 1.0) * light_color;
    }
  }
}%
